#!/usr/bin/env perl
#
# Author: Guillermo Ramos <gramos@gramos.me> (2019)
#
# Run `tgserver -h` for quick help, or `tgserver -h -v` for full manual.
################################################################################

$main::VERSION = "0.1.1";

use Getopt::Long qw(:config auto_version);
use Pod::Usage qw<pod2usage>;
use Data::Dumper;

use FindBin;
use lib "$FindBin::Bin/lib";

use TgLib qw<fetch_token>;
require TgLib::Api;
require TgLib::Cache;
require TgLib::Logger;

my $TOKEN;
my $VERBOSE = 0;
my $HELP;

GetOptions("token=s" => \$TOKEN,
           "verbose+" => \$VERBOSE,
           "help" => \$HELP);
pod2usage(-verbose => $VERBOSE+1) if $HELP or not @ARGV;

my $logger = TgLib::Logger->new($VERBOSE);

# If token was not specified in CLI, get it from ENV/file
$TOKEN ||= fetch_token() or
    pod2usage(-message => "ERROR: Unable to get bot token ($!).\n",
              -verbose => 99, -sections => "AUTHENTICATION");

my $cache = TgLib::Cache->new($logger);
my $api = TgLib::Api->new($TOKEN, $logger);
while (1) {
    # FIXME magic timeout
    foreach my $update (@{$api->get_updates(3600, $cache->offset)}) {
        # Cache current offset
        $cache->offset($update->{'update_id'}+1);

        $logger->debug(sprintf "Update %s", Dumper($update));
        my $text = $update->{'message'}{'text'};
        my $chat_id = $update->{'message'}{'chat'}{'id'};
        $logger->info("Received from chat $chat_id: '$text'\n");

        use IPC::Open2 qw<open2>;
        my $pid = open2(my $progr, my $progw, "@ARGV");
        print $progw $text;
        close($progw);
        my $response = join "", <$progr>;
        chomp $response;
        $logger->debug("'$text' -> @ARGV -> '$response'\n");
        close($progr);

        if ($response) {
            my $api = TgLib::Api->new($TOKEN, $logger);
            $api->send_message($chat_id, $response);
        } else {
            $logger->warn("Empty response, skipping\n");
        }
    }
}


__END__

=head1 NAME

tgserver - Interact with a Telegram Bot

=head1 SYNOPSIS

B<tgserver> [B<-h> | B<--help>] [B<-v>]

B<tgserver> [I<options>] -- I<prog>

=head1 OPTIONS

=over

=item B<--token>=I<token>, B<-t> I<token>

Bot token (see B<AUTHENTICATION>)

=item B<--version>

Show version

=item B<--verbose>, B<-v>

Show more information (combine with B<-h> to see full manual)

=item B<--help>, B<-h>

Show this message

=back

=head1 DESCRIPTION

This program waits for Telegram updates from the bot identified by I<token>. For
every update it runs I<prog> with stdin piped to the update, and sending stdout
back as response.

=head1 EXAMPLE

    tgserver --token 123456789:abcdefghijklmnopqrstuvwxyzABCDEFGHI -- \
      cowsay -f moofasa

=head1 AUTHENTICATION

To get the bot token, this program will check (in order):

=over 2

=item -

The B<--token> CLI argument

=item -

The B<TGUTILS_TOKEN> environment variable

=item -

The contents of I<$XDG_CONFIG_HOME>B</tgutils_token> (usually B<~/.config/tgutils_token>)

=back

=cut
