#!/usr/bin/env perl
#
# Author: Guillermo Ramos <gramos@gramos.me> (2019)
#
# Run `tgrecv -h` for quick help, or `tgrecv -h -v` for full manual.
#
# Dependencies: HTTP-Message, JSON
################################################################################

$main::VERSION = "0.1.0";

use Getopt::Long qw(:config auto_version);
use Pod::Usage qw<pod2usage>;
use LWP::UserAgent;
use Data::Dumper;

use HTTP::Request;
use JSON qw<encode_json decode_json>;

# Local modules
use FindBin;
use lib "$FindBin::Bin/lib";
use TgLib qw<fetch_token>;
use TgLib::Env qw<$HOME $CONFIG_HOME $CACHE_HOME>;
use TgLib::Cache;

my $TOKEN;
my $OUTPUT;
my $OFFSET;
my $AUTO_OFFSET;
my $TIMEOUT = 60;
my $VERBOSE = 0;
my $HELP;

GetOptions("token=s" => \$TOKEN,
           "offset=i" => \$OFFSET,
           "auto-offset" => \$AUTO_OFFSET,
           "timeout=i" => \$TIMEOUT,
           "output=s" => \$OUTPUT,
           "verbose+" => \$VERBOSE,
           "help" => \$HELP);
pod2usage(-verbose => $VERBOSE+1) if $HELP;

# If token was not specified in CLI, get it from ENV/file
$TOKEN ||= fetch_token() or
    pod2usage(-message => "ERROR: Unable to get bot token ($!).\n",
                  -verbose => 99, -sections => "AUTHENTICATION");

my $cache = TgLib::Cache->new;
print STDERR "Using cache:\n", Dumper($cache), "\n" if $VERBOSE > 1;

# Get offset from cache if --auto-offset is enabled (and no --offset provided)
if ($AUTO_OFFSET && ! $OFFSET) {
    $OFFSET |= $cache->offset;
}

my $ua = LWP::UserAgent->new;
my $uri = "https://api.telegram.org/bot$TOKEN/getUpdates?timeout=$TIMEOUT";
$uri = $uri . "&offset=$OFFSET" if $OFFSET;
my $req = HTTP::Request->new("GET", $uri);
if ($VERBOSE) {
    print STDERR "Request:\n", Dumper($req), "\n" if $VERBOSE > 1;
}

my $resp = $ua->request($req);
print STDERR "Response:\n", Dumper($resp), "\n" if $VERBOSE > 1;
if ($resp->is_error()) {
    die $resp->message;
} else {
    my $out = STDOUT;
    if ($OUTPUT) {
        open($out, ">", $OUTPUT) or die "Cannot open $OUTPUT for writing: $!";
    }
    my $results = decode_json($resp->content)->{'result'};

    # Store new offset in cache
    if ($AUTO_OFFSET && @$results) {
        # Update cache: set offset to last update id +1
        $cache->offset($results->[-1]{'update_id'}+1);
        printf STDERR "Cached offset %s (--auto-offset)\n",
            $cache->offset if $VERBOSE > 1;
        $cache->save;
    }

    print $out encode_json($results);
}



__END__

=head1 NAME

tgrecv - Receive updates from Telegram, output them as JSON

=head1 SYNOPSIS

tgrecv [-h | --help]

tgrecv [options]

=head1 OPTIONS

  --offset            Offset of the first message to receive - previous ones are
                      discarded
  --auto-offset       Use offset cache to automatically discard previous updates
                      (if combined with --offset, cache the last update but
                      still use the provided offset for the current request)
  --timeout           Timeout for long polling (default: 60 seconds)
  --output=file       Write the output to file instead of stdout
  --token | -t        Bot token (see AUTHENTICATION)
  --version           Show version
  --verbose | -v      Show more information (combine with -h to see full manual)
  --help | -h         Show this message

=head1 DESCRIPTION

This program receives a single update batch from the Telegram bot identified by
B<token>, and outputs it as a JSON array. The array can contain multiple
updates. The connection is blocking (long polling), so it waits until an update
is available before exiting.

=head1 AUTHENTICATION

To get the bot token, this program will check (in order):

  - The "--token" CLI argument
  - The "TGUTILS_TOKEN" environment variable
  - The contents of "$XDG_CONFIG_HOME/tgutils_token"
    (usually ~/.config/tgutils_token)

=cut
